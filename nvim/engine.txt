int main()
{
    try {
        //////////////////////////////////////////////////////////////// [ #INIT# ]
        // Load up all the modules and do the necessary initialization tasks before we reach the game-loop
        {
            // Load Logger and Profiler first (logging and profiling will be available to all modules)
            Mojula.LoadModule(Mojula.Modules[Logger]);
            Mojula.LoadModule(Mojula.Modules[Profiler]);

            PROFILE_SCOPE("INIT");

            /* PreInit: Base modules, eg. SystemInfo, FileReaders, CustomUserModule Etc */
            {
                PROFILE_SCOPE("PreInit");
                LCC(Mojula.LoadModulesWithPhase(ModuleInitPhase::EPreInit));
            }

            /* PreSplash: Modules needed to render the splash screen, eg. Window, VulkanRendererContext, CustomUserModule  */
            {
                PROFILE_SCOPE("PreSplash");
                LCC(Mojula.LoadModulesWithPhase(ModuleInitPhase::EPreSplash));
            }

            /* BeginSplashScreen: Render the splash screen and a progress bar (can be customized for the packaged game to show game's splash screen instead of the editor) */
            {
                PROFILE_SCOPE("BeginSplash");
                LCC(BeginSplashScreen());
            }

            /* PostSplash(During SplashScreen): Rest of the modules, eg. VulkanRenderer, Networking, CustomUserModule */
            {
                PROFILE_SCOPE("PostSplash");
                LCC(Mojula.LoadModulesWithPhase(ModuleInitPhase::EPostSplash));
            }
            
            /* PreEditor (During SplashScreen): Editor only modules, eg. ??? */
            {
                PROFILE_SCOPE("PreEditor");
                LCC(Mojula.LoadModulesWithPhase(ModuleInitPhase::EPreEditor));
            }

            /* InEditor (After SplashScreen): Lazily-loaded editor only modules, loaded in a separate thread during editor, eg. ??? */
            {
                PROFILE_SCOPE("PostEditor");
                LCC(Mojula.LoadModulesWithPhase(ModuleInitPhase::EPostEditor));
            }
        }

        //////////////////////////////////////////////////////////////// [ #LOOP# ]
        // The main game loop
        {
            PROFILE_SCOPE("TICK");

            /* TickSystems: (Entities, Components, "SYSTEMS"), eg. EventSystem, RenderingSystem, PhysicsSystem, EditorPanelsSystem, CustomUserSystems */ 
            Mojula.TickModules();
        }

        //////////////////////////////////////////////////////////////// [ #DESTROY ]
        // Gracefully destroy everything and exit
        {
            PROFILE_SCOPE("DESTROY");

            Mojula.DestroyModules(); // Unloads modules in reverse order
        }
    }
    catch(Exception exception)
    {
        // Log/show what went wrong

        // Save the user progress if applicable

        return exception.exitCode;
    }
}

struct CoreModule {
}

struct WindowModuleConfig {
}

struct TimeModuleDepedencies{
}

struct VulkanRendererModuleDependencies{
    entt::registry* entitiesModule;
    AssetManager* assetsModule;
    Window* windowModule;
    TimeModule* timeModule;
}

struct WindowModuleDependencies {
}

struct AssetManagerModuleDependencies{
    BinaryFileReader* binaryFileReader;
}

struct GameModuleDependencies {
    Light::Scene scene; // data+functions coupled
    Light::Mirror mirror; // data+functions coupled
}

Mojula::TickModules()
{
    for(auto& module : m_Modules)
    {
        ModuleTickPayload payload;
        for(auto& dependency : module.GetDependencies())
            payload.Add(dependency.GetExposedPayload())

        FileLoaderModule::LoadAsset();

        module->Tick(payload);
    }
}

////////////////////////////////////////////////////////////////
// Entities Systems Componentse
DependsOn{
}

ExtensionInterfaces{
}

Extensions{
    // These components are commonly used
    [ExtensionInterface_Component]: Component_UUID
    [ExtensionInterface_Component]: Component_Tag
    [ExtensionInterface_Component]: Component_Transform

    // These components are used by the RendererModule 
    [ExtensionInterface_Component]: Component_Camera
    [ExtensionInterface_Component]: Component_SkeletalMeshRenderer
    [ExtensionInterface_Component]: Component_StaticMeshRenderer
    [ExtensionInterface_Component]: Component_SpriteRenderer
    [ExtensionInterface_Component]: Component_ParticleEmitter
    [ExtensionInterface_Component]: Component_LightSource

    // These components are used by the AudioModule
    [ExtensionInterface_Component]: Component_AudioSource

    // These components are used by the ScriptModule
    [ExtensionInterface_Component]: Component_NativeScript
    [ExtensionInterface_Component]: Component_LuaJITScript

    // These components are used by the PhysicsModule
    [ExtensionInterface_Component]: Component_RigidBody
    [ExtensionInterface_Component]: Component_CapsuleCollision
    [ExtensionInterface_Component]: Component_BoxCollision
}

////////////////////////////////////////////////////////////////
// Mirror Module (The Editor)
DependsOn{
    Logger, Profiler // Default available to all modules
    Window,
    AssetManager, [ FileReader ]
    VulkanRenderer, [ EntityComponentSystem, UserInterface ]
    EntityComponentSystem,
    UserInterface,
    EventSystem,
}

ExtensionInterfaces{
    ExtensionInterface_Panel
}

Extensions{
    [ExtensionInterface_Panel]: Panel_AssetBrowser
    [ExtensionInterface_Panel]: Panel_Properties
    [ExtensionInterface_Panel]: Panel_SceneHierarchy
    [ExtensionInterface_Panel]: Panel_AnimationSequencer
}

Mirror {
}
